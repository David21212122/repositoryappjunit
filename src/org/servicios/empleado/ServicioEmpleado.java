package org.servicios.empleado;

/*
 * LAS PRUEBAS UNITARIAS O PRUEBAS DE UNIDAD, SON UN MECANISMO MUY EFECTIVO
 * 
 * QUE BUENAS PRACTICAS DE DESARROLLO DE SOFTWARE UTILIZASTE)
 * 
 * 1.SEGUIR LA METODOLOGIA
 * 2.ENTREGAR A TIEMPO LOS ENTREGABLES
 * 3.CALIDAD DE SOFTWARE: CLASES DUPLICADAS, METODOS APLICADOSREDUCCION DE CODIGO, MANTENIMIENTO DE CODIGO, DU¿OCUMENTACION
 * 4.PRUEBAS UNITARIAS: COMPROBAR EL FUNCIONAMIENTO DEL CODIGO
 * 5.TESTEAR LA APLICACION: CREAR PRUEBAS DE TESTEO A NIVEL SE SERVIDOR Y NIVEL DE CLIENTE Y PRODUCCION.
 * 6.APLICAR PATRON DE DISEÑO DE TESTEO
 * 7.SOPORTE TECNICO:CREAR MANUALES DE USUARIOS..ETC
 * 8.SOPORTE DE CODIGO...
 * 9.SOPORTE DE INTEGRACION DE CODIGO
 * 
 * 
 * DESARROLLADOR
 * 1.-CREAR CLASES CON NOMBRES EN BASE AL DIAGRAMA DE CLASES
 * 2.-CREAR VARIABLES Y METODOS CON NOMBRES EN BASE AL DIAGRAMA DE CLASES
 * 3.-CREAR CLASES PADRE PARA HEREDAR METODOS
 * 4.-INICIALIZAR TODAS LAS VARIABLES
 * 5.-TODAS LAS CLASES DEBEN TENER EL METODO CONSTRUCTOR
 * 6.-EN EL METODO CONTRUCTOR INICIALIZAR LAS VARIABLES MIEMBRO
 * 7.-INICIALIZAR LA CLASE EN EL SUPER CONSTRUCTOR
 * 8.-DOCUMENTACION DE CODIGO
 */
public class ServicioEmpleado {
		public double salarioBonoEmpleado(double salario, double bono) {
			return salario + bono;
		}
		public double salarioPrestamoEmpleado(double salario, double prestamo) {
			return salario - prestamo;
		}
		
}
